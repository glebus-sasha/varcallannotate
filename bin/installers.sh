#!/bin/bash
# =======================
# Installers
# =======================

install_java() {
  if check_java_installed; then
    echo_status 0 "Java $JAVA_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    return 0
  fi
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SDKMAN –∏ Java $JAVA_VERSION..."
  curl -s https://get.sdkman.io | bash
  source "$HOME/.sdkman/bin/sdkman-init.sh"
  sdk install java "$JAVA_VERSION"
  echo_status $? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Java –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

install_nextflow() {
  if check_nextflow_installed; then
    echo_status 0 "Nextflow —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
  fi
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Nextflow..."
  curl -s https://get.nextflow.io | bash
  chmod +x nextflow
  mkdir -p "$INSTALL_DIR"
  mv nextflow "$INSTALL_DIR/"

  # –î–æ–±–∞–≤–ª—è–µ–º –≤ .bashrc, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  grep -qxF 'export PATH="$HOME/.local/bin:$PATH"' ~/.bashrc || echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
  source ~/.bashrc
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Nextflow –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  add_or_replace_bashrc_line 'export NXF_APPTAINER_CACHEDIR="$HOME/.nextflow/apptainer"'
  add_or_replace_bashrc_line 'export NXF_SINGULARITY_CACHEDIR="$HOME/.nextflow/singularity"'

  # –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
  export PATH="$HOME/.local/bin:$PATH"
  export NXF_APPTAINER_CACHEDIR="$HOME/.nextflow/apptainer"
  export NXF_SINGULARITY_CACHEDIR="$HOME/.nextflow/singularity"

  echo_status $? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nextflow –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ .bashrc (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º)
add_or_replace_bashrc_line() {
  local line="$1"
  local file="$HOME/.bashrc"
  local key="${line%%=*}"  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –¥–æ –∑–Ω–∞–∫–∞ '='
  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è grep
  local grep_key=$(echo "$key" | sed 's/\$/\\$/g')
  if grep -q "^$grep_key" "$file"; then
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
    sed -i "s|^$grep_key.*|$line|" "$file"
  else
    echo "$line" >> "$file"
  fi
}

install_apptainer() {
  if check_apptainer_installed; then
    echo_status 0 "Apptainer —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
  fi
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Apptainer..."
  sudo apt-get update
  sudo apt-get install -y build-essential libseccomp-dev pkg-config uidmap squashfs-tools fakeroot cryptsetup tzdata dh-apparmor curl wget git libsubid-dev

  wget -O /tmp/go${GOVERSION}.${GO_OS}-${GO_ARCH}.tar.gz https://dl.google.com/go/go${GOVERSION}.${GO_OS}-${GO_ARCH}.tar.gz
  sudo tar -C /usr/local -xzf /tmp/go${GOVERSION}.${GO_OS}-${GO_ARCH}.tar.gz

  add_or_replace_bashrc_line 'export PATH=$PATH:/usr/local/go/bin'
  export PATH=$PATH:/usr/local/go/bin

  if [ ! -d "$HOME/apptainer" ]; then
    git clone "$APPTAINER_REPO" "$HOME/apptainer"
  fi

  cd "$HOME/apptainer" || { echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ apptainer"; return 1; }
  ./mconfig
  cd ./builddir || { echo "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ builddir"; return 1; }
  make
  sudo make install
  cd ~
  echo_status $? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Apptainer –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

install_conda() {
  if check_conda_installed; then
    echo_status 0 "Conda —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    return 0
  fi
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Miniconda..."
  wget -O ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  bash ~/miniconda.sh -b -p "$CONDA_DIR"
  rm ~/miniconda.sh
  export PATH="$CONDA_DIR/bin:$PATH"
  eval "$($CONDA_DIR/bin/conda shell.bash hook)"
  conda init
  echo_status $? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Miniconda –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

install_mamba() {
  if check_mamba_installed; then
    echo_status 0 "Mamba —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    return 0
  fi
  echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Mamba —á–µ—Ä–µ–∑ Conda..."
  export PATH="$CONDA_DIR/bin:$PATH"
  eval "$($CONDA_DIR/bin/conda shell.bash hook)"
  conda install -y -n base -c conda-forge mamba
  echo_status $? "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mamba –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

install_vep_cache() {
  if check_vep_cache_installed; then
    echo_status 0 "–ö—ç—à VEP —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
  fi

  echo "–ö—ç—à VEP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $VEP_CACHE_DIR, –∑–∞–≥—Ä—É–∂–∞—é..."
  mkdir -p "$VEP_CACHE_DIR"
  curl -L -o "$VEP_CACHE_DIR/vep_cache.tar.gz" "https://ftp.ensembl.org/pub/release-114/variation/indexed_vep_cache/homo_sapiens_vep_114_GRCh38.tar.gz"
  tar -xzvf "$VEP_CACHE_DIR/vep_cache.tar.gz" -C "$VEP_CACHE_DIR"
  rm "$VEP_CACHE_DIR/vep_cache.tar.gz"
  echo_status $? "–ö—ç—à VEP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

download_reference() {
  if check_reference_installed; then
    echo_status 0 "–†–µ—Ñ–µ—Ä–µ–Ω—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
  fi

  local BASE_URL="https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0"
  mkdir -p "$REF_DIR"
  mkdir -p "$REF_DIR/faidx"
  mkdir -p "$REF_DIR/bwaidx"

  cd "$REF_DIR" || exit

  echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –≥–µ–Ω–æ–º hg38..."

  (curl -s -O "$BASE_URL/Homo_sapiens_assembly38.fasta" && echo "‚úÖ Homo_sapiens_assembly38.fasta —Å–∫–∞—á–∞–Ω") &
  (curl -s -O "$BASE_URL/Homo_sapiens_assembly38.fasta.fai" && echo "‚úÖ Homo_sapiens_assembly38.fasta.fai —Å–∫–∞—á–∞–Ω") &

  echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã BWA..."
  for ext in amb ann bwt pac sa; do
    (
      curl -s -O "$BASE_URL/Homo_sapiens_assembly38.fasta.64.$ext" && echo "‚úÖ Homo_sapiens_assembly38.fasta.64.$ext —Å–∫–∞—á–∞–Ω"
    ) &
  done

  wait

  echo "üì¶ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã..."

  mv Homo_sapiens_assembly38.fasta "$REF_DIR/hg38.fa"
  mv Homo_sapiens_assembly38.fasta.fai "$REF_DIR/faidx/hg38.fa.fai"

  for ext in amb ann bwt pac sa; do
    mv "Homo_sapiens_assembly38.fasta.64.$ext" "$REF_DIR/bwaidx/hg38.fa.$ext"
  done

  echo_status $? "–†–µ—Ñ–µ—Ä–µ–Ω—Å –∏ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

